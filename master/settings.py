"""
Django settings for master project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
from decouple import config
import dj_database_url
from dotenv import load_dotenv
from corsheaders.defaults import default_headers
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# cloudinary imports
import cloudinary
import cloudinary.uploader
import cloudinary.api

TEMPLATES_DIRS = os.path.join(BASE_DIR, 'templates')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# For secret key
SECRET_KEY = config('SECRET_KEY')

# For debug
DEBUG = config('DEBUG', default=False, cast=bool)

#### Local Test
ALLOWED_HOSTS = ['*']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # My apps
    'main.apps.MainConfig',
    'users.apps.UsersConfig',
    'chatbot',

    # Third-party apps
    'django_countries',
    'cities_light',
    'django_filters',
    'corsheaders',

    # cloudinary 
    'cloudinary',
    'cloudinary_storage',

    # For Google Authentication
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    
    # rest_framework apps
    'rest_framework',
    'rest_framework.authtoken',
]

SITE_ID = 1

# ===========================
#  CHATBOT CONFIGURATION
# ===========================

# Google AI (Gemini) Configuration
GOOGLE_API_KEY = os.environ.get('GOOGLE_API_KEY', config('GOOGLE_API_KEY', default=''))

# Chatbot System Prompt (Updated to be simpler and consistent with your logic)
CHAT_SYSTEM_PROMPT = """
You are the Finda shopping assistant. 
Greet the user: 'Hello, welcome to Finda! What can we help you find today?' 
When the user asks for a product or service, first search Finda's database. 
If matches exist, list the top 3 by rating and then ask: 
'Would you also like suggestions from external stores (Amazon, Jumia, etc.)?' 
If no matches, intelligently suggest alternatives using external sources. 
You can also help with voice messages and image searches to find products.
"""

# REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.FormParser',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/hour',
        'user': '1000/hour',
        'chatbot': '500/hour',
    }
}

# Authentication Configuration
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_LOGIN_METHODS = {"email"}
ACCOUNT_SIGNUP_FIELDS = ["email*", "password1*", "password2*"]
SOCIALACCOUNT_ADAPTER = 'users.adapters.CustomSocialAccountAdapter'

# CLOUDINARY-DJANGO INTEGRATION
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': config('CLOUDINARY_CLOUD_NAME'),
    'API_KEY': config('CLOUDINARY_API_KEY'),
    'API_SECRET': config('CLOUDINARY_API_SECRET'),
    'SECURE': True,
}

# CLOUDINARY CORE CONFIGURATION (required to prevent the ValueError)
cloudinary.config( 
    cloud_name=config('CLOUDINARY_CLOUD_NAME'), 
    api_key=config('CLOUDINARY_API_KEY'), 
    api_secret=config('CLOUDINARY_API_SECRET') 
)

DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
CLOUDINARY_URL = config('CLOUDINARY_URL')

MIDDLEWARE = [
    # For Google Authentication
    "allauth.account.middleware.AccountMiddleware",
    
    # main middleware
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

CSRF_COOKIE_SAMESITE = 'None'
CSRF_COOKIE_SECURE = True
# CORS Settings
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:5173",
    "https://finda-api-chatbot.vercel.app",
    "https://finda-six.vercel.app",
    "https://www.finda-six.vercel.app",

]

CORS_ALLOW_ALL_ORIGINS = True

# For production (specify your React app's domain)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",  # React dev server
    "http://127.0.0.1:8000",
    "https://finda-six.vercel.app",
    "https://finda-six.vercel.app",
    "https://www.finda-api-chatbot.vercel.app",
]

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = list(default_headers) + [
    "authorization",
    "x-csrftoken",
]

# Provider specific settings
SOCIALACCOUNT_PROVIDERS = {
    # For Google Authentication
    'google': {
        'APP': {
            'client_id': config('CLIENT_ID'),
            'secret': config('SECRET'),
            'key': ''
        }
    }
}

SOCIALACCOUNT_LOGIN_ON_GET = True

ROOT_URLCONF = 'master.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATES_DIRS],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'master.wsgi.application'

# Database
DATABASES = {
    # Supabase db
    'default': dj_database_url.parse(
        'postgresql://postgres.jeoqgwhwkkqpzpobkeny:finda_db@aws-0-eu-north-1.pooler.supabase.com:6543/postgres'
    ),
}

# # settings.py
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / "db.sqlite3",
#     }
# }


# Password validation
AUTH_PASSWORD_VALIDATORS = [
    # Commented out for development - uncomment for production
    # {
    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    # },
]

AUTH_USER_MODEL = 'users.CustomUser'
AUTHENTICATION_BACKENDS = [
    'users.auth_backends.EmailOrPhoneBackend',  # Custom backend
    'django.contrib.auth.backends.ModelBackend',  # Default Django backend
    # For Google Authentication
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Paystack Keys (should ideally be moved to .env)
PAYSTACK_SECRET_KEY = config('PAYSTACK_SECRET_KEY', default='sk_test_3e89989f81e42e78b1bce3d756f9da62ff9c8612')
PAYSTACK_PUBLIC_KEY = config('PAYSTACK_PUBLIC_KEY', default='pk_test_82cbf50854af160f931f8b9e6f9c84af8489536e')
PAYSTACK_PAYMENT_URL = 'https://api.paystack.co/transaction/initialize'

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

LOGIN_REDIRECT_URL = '/'

# Email Configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 465
EMAIL_USE_SSL = True
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = 'ibeawuchichukwugozirim@gmail.com'

# File Upload Settings for Multimedia Features
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB for voice files
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB for images
IMAGE_MAX_SIZE = 5 * 1024 * 1024  # 5MB max for images specifically

# Cache Configuration for Chatbot
# Load REDIS_URL
REDIS_URL = os.environ.get("REDIS_URL")

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': REDIS_URL,
        'KEY_PREFIX': 'finda_chat',
        'TIMEOUT': 3600,  # 1 hour
    }
}

# Celery Configuration for Background Tasks
CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = REDIS_URL
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'main/static')]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ===========================
#  LOGGING CONFIGURATION
# ===========================

# Create logs directory if it doesn't exist
LOGS_DIR = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(LOGS_DIR):
    os.makedirs(LOGS_DIR)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'chatbot_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGS_DIR, 'chatbot.log'),
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'chatbot': {
            'handlers': ['chatbot_file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}